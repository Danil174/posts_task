{"version":3,"sources":["const.js","util.js","components/post/Post.jsx","components/loading/Loading.jsx","components/posts-list/PostsList.jsx","components/app/App.jsx","index.js"],"names":["StatusCodes","checkStatus","response","status","Error","fetchData","endpoint","fetch","then","res","json","Item","styled","li","props","theme","mainPostColor","postGray","postBlue","Post","post","author","title","body","name","username","className","Ring","div","Loading","Input","input","PostsList","posts","loading","useState","filteredPosts","setFilteredPosts","searchStr","setSearch","debouncedFilterStr","value","debouncedValue","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","useDebounce","filter","toLowerCase","includes","type","placeholder","onChange","evt","target","length","map","it","key","id","fontSans","GlobalStyle","createGlobalStyle","colorDark","NewError","p","getFormattedPosts","a","userIds","userId","uniqueUserIds","Set","Promise","all","users","formattedPosts","user","find","App","setPosts","setLoading","error","setError","catch","err","finally","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bcff4ea6.chunk.js","sourcesContent":["export const POSTS_ENDPOINT = 'https://jsonplaceholder.typicode.com/posts';\n\nexport const USERS_ENDPOINT = 'https://jsonplaceholder.typicode.com/users';\n\nexport const StatusCodes = {\n  SUCCESS: 200,\n  REDIRECTION: 300\n};\n\nexport const DEBOUNCE_TIME = 500;\n","import { useState, useEffect } from 'react';\nimport { DEBOUNCE_TIME, StatusCodes } from './const.js';\n\nconst checkStatus = (response) => {\n  if (response.status >= StatusCodes.SUCCESS && response.status < StatusCodes.REDIRECTION) {\n    return response;\n  } else {\n    throw new Error(response.status);\n  }\n};\n\nexport const fetchData = (endpoint) => {\n  return fetch(endpoint)\n    .then(checkStatus)\n    .then((res) => res.json())\n};\n\nexport const useDebounce = (value) => {\n  const [debouncedValue, setDebouncedValue] = useState(value);\n\n  useEffect(\n    () => {\n      const handler = setTimeout(() => {\n        setDebouncedValue(value);\n      }, DEBOUNCE_TIME);\n\n      return () => {\n        clearTimeout(handler);\n      };\n    }, [value]);\n\n  return debouncedValue;\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport PropTypes from \"prop-types\";\n\nconst Item = styled.li`\n    position: relative;\n    display: flex;\n    flex-direction: row;\n    margin-top: 10px;\n    padding: 15px;\n    background-color: ${props => props.theme.mainPostColor};\n    border-radius: 13px;\n    box-shadow: 1px 1px 5px -2px #9b93e9;\n\n    .block {\n      display: flex;\n      flex-direction: column;\n      align-items: flex-start;\n    }\n\n    .user_block {\n      width: 150px;\n      flex-shrink: 0;\n      margin-right: 15px;\n    }\n\n    .name {\n      width: 100%;\n      white-space: nowrap;\n      overflow: hidden;\n      text-overflow: ellipsis;\n    }\n\n  .ico {\n    align-self: center;\n    position: relative;\n    width: 70px;\n    height: 70px;\n    background-color: ${props => props.theme.postGray};\n    border-radius: 50%;\n    overflow: hidden;\n  }\n\n  .ico::after,\n  .ico::before {\n    content: '';\n    position: absolute;\n    left: 50%;\n    transform: translateX(-50%);\n  }\n\n  .ico::after {\n    top: 14px;\n    width: 40px;\n    height: 40px;\n    border-radius: 50%;\n    background-color: ${props => props.theme.postBlue};\n  }\n\n  .ico::before {\n    top: 41px;\n    width: 0;\n    height: 0;\n    border-left: 30px solid transparent;\n    border-right: 30px solid transparent;\n    border-bottom: 40px solid ${props => props.theme.postBlue};\n  }\n`;\n\nconst Post = ({ post }) => {\n  const { author, title, body } = post;\n  const { name, username } = author;\n  return (\n    <Item>\n      <div className=\"block user_block\">\n        <span className=\"ico\"></span>\n        <span className=\"name\" title={name}><strong>Name: </strong>{name}</span>\n        <span className=\"name\" title={username}><strong>UserName: </strong>{username}</span>\n      </div>\n      <div className=\"block text_block\">\n        <h3>{title}</h3>\n        <p>{body}</p>\n      </div>\n    </Item>\n  );\n}\n\nPost.propTypes = {\n  post: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    body: PropTypes.string.isRequired,\n    author: PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      username: PropTypes.isRequired\n    })\n  }).isRequired\n};\n\nexport default Post;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst Ring = styled.div`\n    display: inline-block;\n    width: 8rem;\n    height: 8rem;\n\n    :after {\n        content: \" \";\n        display: block;\n        width: 6.4rem;\n        height: 6.4rem;\n        margin: 8px;\n        border-radius: 50%;\n        border: 6px solid ${props => props.theme.postBlue};\n        border-color: ${props => props.theme.postBlue} transparent ${props => props.theme.postBlue} transparent;\n        animation: ring 1.2s linear infinite;\n    }\n\n    @keyframes ring {\n        0% {\n            transform: rotate(0deg);\n        }\n        100% {\n            transform: rotate(360deg);\n        }\n    }\n`;\n\nconst Loading = () => {\n  return <Ring />;\n}\n\nexport default Loading;\n","import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport PropTypes from \"prop-types\";\nimport { useDebounce } from \"../../util.js\";\n\nimport Post from \"../post/Post.jsx\";\nimport Loading from \"../loading/Loading.jsx\";\n\nconst Input = styled.input`\n    border: none;\n    box-shadow: none;\n    background-color: #f3f5f9;\n    color: #363838;\n    font-size: 14px;\n    padding: 8px 19px;\n    height: 38px;\n\n    :focus {\n        outline: 2px solid #5583b5;\n    }\n`;\n\nconst PostsList = ({ posts, loading }) => {\n  const [filteredPosts, setFilteredPosts] = useState([]);\n  const [searchStr, setSearch] = useState(\"\");\n\n  const debouncedFilterStr = useDebounce(searchStr);\n\n  useEffect(() => {\n    if (debouncedFilterStr) {\n      setFilteredPosts(\n        posts.filter((post) =>\n          post.title.toLowerCase().includes(debouncedFilterStr.toLowerCase())\n        )\n      );\n    } else {\n      setFilteredPosts(posts);\n    }\n\n  }, [debouncedFilterStr, posts]);\n\n  if (loading) {\n    return (<Loading>Данные загружаются...</Loading>)\n  }\n\n  return (\n    <div>\n      <Input\n        type=\"text\"\n        placeholder=\"filter posts\"\n        onChange={(evt) => setSearch(evt.target.value)}\n        value={searchStr}\n      />\n      <br />\n      {\n        filteredPosts.length === 0\n          ?\n          <strong>Соответствий не найдено</strong>\n          :\n          <ul>\n            {filteredPosts.map((it) =>\n              <Post\n                key={it.id}\n                post={it}\n              />\n            )}\n          </ul>\n      }\n    </div>\n  );\n}\n\nPostsList.propTypes = {\n  posts: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      body: PropTypes.string.isRequired,\n      author: PropTypes.shape({\n        name: PropTypes.string.isRequired,\n        username: PropTypes.isRequired\n      })\n    }).isRequired\n  ),\n  loading: PropTypes.bool.isRequired\n};\n\nexport default PostsList;\n","import React, { useState, useEffect } from 'react';\nimport styled, { ThemeProvider, createGlobalStyle } from 'styled-components';\nimport PostsList from '../posts-list/PostsList.jsx';\n\nimport { POSTS_ENDPOINT, USERS_ENDPOINT } from '../../const.js';\nimport { fetchData } from  '../../util.js';\n\nconst theme = {\n  mainPostColor: 'rgba(207, 203, 245, 0.25)',\n  postBlue: '#5563b5',\n  postGray: '#bab6b6',\n  fontSans: 'system-ui, BlinkMacSystemFont, -apple-system, Segoe UI, Roboto, Oxygen, Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif'\n};\n\nconst GlobalStyle = createGlobalStyle`\n  * {\n    text-rendering: optimizeLegibility;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    font-kerning: auto;\n    box-sizing: border-box;\n    &::before,\n    &::after {\n      box-sizing: inherit;\n    }\n  }\n\n  :root {\n    font-size: 10px;\n  }\n\n  body {\n    font-family: ${props => props.theme.fontSans};\n    font-size: 1.4rem;\n    line-height: 1.5;\n    color: ${props => props.theme.colorDark};\n    margin: 0;\n    padding: 0;\n  }\n\n  h1,\n  h3,\n  p {\n    margin: 0;\n  }\n\n  ul {\n    padding: 0;\n    margin: 0;\n    list-style: none;\n  }\n\n  .container {\n    max-width: 90rem;\n    width: 100%;\n    margin-left: auto;\n    margin-right: auto;\n    padding-left: 2rem;\n    padding-right: 2rem;\n    @media (min-width: 768px) {\n      padding-left: 4rem;\n      padding-right: 4rem;\n    }\n  }\n`;\n\nconst NewError = styled.p`\n  color: red;\n  font-size: 2rem;\n`;\n\nconst getFormattedPosts = async () => {\n  const posts = await fetchData(POSTS_ENDPOINT);\n  const userIds = posts.map((post) => post.userId);\n  const uniqueUserIds = [...new Set(userIds)];\n  const users = await Promise.all(uniqueUserIds.map((userId) => fetchData(`${USERS_ENDPOINT}/${userId}`)));\n  const formattedPosts = posts.map((post) => {\n    const user = users.find((user) => user.id === post.userId);\n    const { name, username } = user;\n    return {\n      ...post,\n      author: {\n        name,\n        username\n      }\n    };\n  });\n  return formattedPosts;\n}\n\nconst App = () => {\n  const [posts, setPosts] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    setLoading(true);\n    getFormattedPosts()\n      .then((posts) => setPosts(posts))\n      .catch((err) => setError(err))\n      .finally(() => setLoading(false));\n  }, []);\n\n  return (\n    <ThemeProvider theme={theme}>\n      <GlobalStyle />\n      <div className=\"container\">\n        <h1>List of posts</h1>\n\n        {\n          error\n          ?\n          <NewError>Не удалось загрузить данные</NewError>\n          :\n          <PostsList\n            posts={posts}\n            loading={loading}\n          />\n        }\n      </div>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app/App.jsx';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}